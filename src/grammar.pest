Program  = _{ SOI ~ ExprList ~ EOI }
ExprList =  { (Expr ~ ";")* ~ Expr }
Expr     = _{ BinaryExpr | Let | Term | If }

// Int (Int -> Int)
Int  = @{ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
Bool = @{ "True" | "False" }

Term = _{ Int | Bool | Var | "(" ~ Expr ~ ")" }

BinaryExpr   =  { Term ~ Operator ~ Term }
Operator     =  { IntOperator | CompOperator | BoolOperator }
IntOperator  = _{ "+" | "-" | "*" | "/" }
CompOperator = _{ "<=" | "<" | ">=" | ">" | "==" | "!=" }
BoolOperator = _{ "&&" | "||" }

// If
If = { "if(" ~ Expr ~ ")" ~ "{" ~ ExprList ~ "}" ~ "else" ~ "{" ~ ExprList ~ "}" }

// Let
Let =  { "let" ~ Var ~ "=" ~ Term }
Var = @{ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }

WHITESPACE = _{ " " | "\t" | NEWLINE }